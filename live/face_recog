from flask import Flask, Response
import cv2
import face_recognition
import os
import glob
import numpy as np
import time

app = Flask(_name_)

cam_ip="<The ip returned by pi>"

camera = cv2.VideoCapture(cam_ip)

images_path="<path to the folder which contains the face images>"
known_face_encodings = []
known_face_names = []
frame_resizing = 0.25
process_every_n_frames = 2
frame_count = 0
fps = 0
prev_time = time.time()

last_face_locations = []
last_face_names = []

def load_encoding_images(images_path):
    """Load known faces from images folder"""
    global known_face_encodings, known_face_names
    
    images_path_list = glob.glob(os.path.join(images_path, "*.jpg"))
    if len(images_path_list) == 0:
        print(f"WARNING: No images found in '{images_path}' folder")
        print("Face recognition will only detect 'Unknown' faces")
        return
    
    print(f"Found {len(images_path_list)} image(s). Loading...")
    for img_path in images_path_list:
        img = cv2.imread(img_path)
        if img is None:
            continue
        rgb_img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        encodings = face_recognition.face_encodings(rgb_img)
        if len(encodings) == 0:
            continue
        known_face_encodings.append(encodings[0])
        name = os.path.splitext(os.path.basename(img_path))[0]
        known_face_names.append(name)
    
    print(f"Encoding complete: {len(known_face_encodings)} faces loaded.")

def detect_known_faces(frame):
    """Detect and recognize faces in frame"""
    small_frame = cv2.resize(frame, (0, 0), fx=frame_resizing, fy=frame_resizing)
    rgb_small_frame = cv2.cvtColor(small_frame, cv2.COLOR_BGR2RGB)
    face_locations = face_recognition.face_locations(rgb_small_frame)
    face_encodings = face_recognition.face_encodings(rgb_small_frame, face_locations)

    face_names = []
    for face_encoding in face_encodings:
        matches = face_recognition.compare_faces(known_face_encodings, face_encoding)
        name = "Unknown"
        if len(known_face_encodings) > 0:
            distances = face_recognition.face_distance(known_face_encodings, face_encoding)
            best_idx = np.argmin(distances)
            if matches[best_idx]:
                name = known_face_names[best_idx]
        face_names.append(name)

    face_locations = np.array(face_locations) / frame_resizing
    return face_locations.astype(int), face_names

def gen_frames():
    """Generate frames with face detection"""
    global frame_count, fps, prev_time, last_face_locations, last_face_names
    
    while True:
        success, frame = camera.read()
        if not success:
            break
        
        frame_count += 1
        

        curr_time = time.time()
        fps = 1 / (curr_time - prev_time + 0.0001)
        prev_time = curr_time
        

        if frame_count % process_every_n_frames == 0:
            face_locations, face_names = detect_known_faces(frame)
            last_face_locations = face_locations
            last_face_names = face_names
        else:
    
            face_locations = last_face_locations
            face_names = last_face_names
        

        for (y1, x2, y2, x1), name in zip(face_locations, face_names):
            color = (0, 200, 0) if name != "Unknown" else (0, 0, 200)
            cv2.rectangle(frame, (x1, y1), (x2, y2), color, 3)
            cv2.rectangle(frame, (x1, y1 - 30), (x2, y1), color, cv2.FILLED)
            cv2.putText(frame, name, (x1 + 5, y1 - 5), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)
        
        cv2.putText(frame, f"FPS: {int(fps)}", (10, 30), 
                   cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 255, 0), 2)
        
        ret, buffer = cv2.imencode('.jpg', frame)
        frame_bytes = buffer.tobytes()
        
        yield (b'--frame\r\n'
               b'Content-Type: image/jpeg\r\n\r\n' + frame_bytes + b'\r\n')

@app.route('/video')
def video():
    return Response(gen_frames(), 
                   mimetype='multipart/x-mixed-replace; boundary=frame')

@app.route('/')
def index():
    return '''
    <html>
        <head><title>Face Recognition Stream</title></head>
        <body style="background-color: #1a1a1a; color: white; text-align: center; font-family: Arial;">
            <h1>Face Recognition Stream</h1>
            <img src="/video" width="80%">
            <p>Green box = Known face | Red box = Unknown face</p>
        </body>
    </html>
    '''

if _name_ == '_main_':
    load_encoding_images(images_path)
    print("\n=== Starting Face Recognition Server ===")
    print("Access the stream at: http://0.0.0.0:5000")
    print("Make sure 'images' folder exists with face images")
    print("========================================\n")
    
    app.run(host='0.0.0.0', port=5000)
